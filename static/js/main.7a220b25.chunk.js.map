{"version":3,"sources":["components/logo192.png","logo.svg","components/basicParts/ChatHeader.jsx","components/basicParts/ChatInput.jsx","components/basicParts/UserMessages.jsx","components/basicParts/DoctorMessage.jsx","components/cards/ChatBox.jsx","components/basicParts/SymptomHeader.jsx","components/basicParts/SymptomNav.jsx","components/cards/SymptomBox.jsx","components/basicParts/OutcomeHeader.jsx","components/cards/OutcomeBox.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChatHeader","className","src","logo","alt","href","class","ChatInput","state","text","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","newMessage","onSubmit","this","type","name","id","placeholder","onChange","onClick","Component","UserMessage","DeleteMessage","messageList","length","map","texts","key","DoctorMessage","ChatBox","userMessage","doctorMessage","deleteMessage","filter","Date","now","UserMessages","SymptomHeader","SymptomNav","SymptomBox","OutcomeHeader","OutcomeBox","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7a220b25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo192.8b76ebf9.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./../../App.css\";\nimport logo from \"../logo192.png\";\n\nfunction ChatHeader() {\n  return (\n    <div className=\"ChatHeader\">\n      <img src={logo} alt=\"Logo\" className=\"logo\" />\n      <div className=\"nav-box\">\n        <a href=\"#\" className=\"refresh-link\">\n          <i class=\"fas fa-redo-alt\"></i>\n        </a>\n        <a href=\"#\" className=\"nav-bar\">\n          <i class=\"fas fa-bars\"></i>\n        </a>\n      </div>\n    </div>\n  );\n}\nexport default ChatHeader;\n","import React, { Component } from \"react\";\nimport \"./../../App.css\";\n\nclass ChatInput extends Component {\n  state = {\n    text: \"\",\n  };\n\n  handleChange = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n  handleSubmit = (e) => {\n    e.preventDefault();\n    this.props.newMessage(this.state);\n    this.setState({\n      text: \"\",\n    });\n  };\n  render() {\n    return (\n      <div className=\"ChatInput\">\n        <form className=\"form\" onSubmit={this.handleSubmit}>\n          <input\n            type=\"text\"\n            name=\"symptom\"\n            id=\"inputChat\"\n            className=\"chat-input-area\"\n            placeholder=\"Enter Symptom...\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          {/* <input type=\"submit\" value=\"x\" className=\"submit-btn\" /> */}\n\n          <a href=\"#\">\n            <i class=\"fas fa-file-upload submit-btn\"></i>\n          </a>\n          <a href=\"#\" onClick={this.handleSubmit}>\n            <i class=\"fas fa-paper-plane submit-btn\"></i>\n          </a>\n        </form>\n      </div>\n    );\n  }\n}\nexport default ChatInput;\n","import React from \"react\";\n\nconst UserMessage = ({ UserMessage, DeleteMessage }) => {\n  const messageList = UserMessage.length\n    ? UserMessage.map((texts) => {\n        return (\n          <div className=\"userMessage-container\">\n            <div key={texts.id} className=\"message-box user-message\">\n              <span\n                onClick={() => {\n                  DeleteMessage(texts.id);\n                }}\n              >\n                {texts.text}\n              </span>\n            </div>\n          </div>\n        );\n      })\n    : null;\n  return <div>{messageList}</div>;\n};\nexport default UserMessage;\n","import React from \"react\";\n\nconst DoctorMessage = ({ DoctorMessage }) => {\n  const messageList = DoctorMessage.length ? (\n    DoctorMessage.map((texts) => {\n      return (\n        <div className=\"doctorMessage-container\">\n          <div key={texts.id} className=\"message-box doctor-message\">\n            <span>{texts.text}</span>\n          </div>\n        </div>\n      );\n    })\n  ) : (\n    <p>nothing</p>\n  );\n  return <div>{messageList}</div>;\n};\nexport default DoctorMessage;\n","import React, { Component } from \"react\";\nimport \"./../../App.css\";\nimport ChatHeader from \"../basicParts/ChatHeader\";\nimport ChatInput from \"../basicParts/ChatInput\";\nimport UserMessages from \"./../basicParts/UserMessages\";\nimport DoctorMessages from \"./../basicParts/DoctorMessage\";\n\nclass ChatBox extends Component {\n  state = {\n    userMessage: [\n      // { id: 1, text: \"hello\" },\n      // { id: 4, text: \"allo\" },\n    ],\n    doctorMessage: [\n      { id: 2, text: \"Hi, I am a Doctor\" },\n      { id: 3, text: \"Send your symptoms\" },\n    ],\n  };\n  deleteMessage = (id) => {\n    const userMessage = this.state.userMessage.filter((text) => {\n      return text.id !== id;\n    });\n    this.setState({\n      userMessage: userMessage,\n    });\n  };\n  newMessage = (text) => {\n    text.id = Date.now();\n    let texts = [...this.state.userMessage, text];\n    this.setState({\n      userMessage: texts,\n    });\n  };\n  render() {\n    return (\n      <div className=\"Chatbox\">\n        <ChatHeader />\n        <div className=\"message-container\">\n          <DoctorMessages\n            DoctorMessage={this.state.doctorMessage}\n            className=\"doctor-message message-text\"\n          />\n          <UserMessages\n            UserMessage={this.state.userMessage}\n            DeleteMessage={this.deleteMessage}\n            className=\"user-message message-text\"\n          />\n        </div>\n        <ChatInput newMessage={this.newMessage} />\n      </div>\n    );\n  }\n}\nexport default ChatBox;\n","import React from \"react\";\nimport \"./../../App.css\";\n\nfunction SymptomHeader() {\n  return (\n    <div className=\"symptom-header\">\n      <div className=\"user-profile\">\n        <div className=\"profile-img\">\n          <i class=\"fas fa-user user-icon\"></i>\n        </div>\n        <div className=\"user-info\">\n          <p className=\"user-name\">Hola kr. prasad</p>\n          <p className=\"user-age\">\n            Male,<span> 22 years</span>\n          </p>\n        </div>\n      </div>\n      <div className=\"edit\">\n        <a href=\"#\" className=\"edit-icon-link\">\n          <i class=\"fas fa-user-edit edit-icon\"></i>\n        </a>\n      </div>\n    </div>\n  );\n}\nexport default SymptomHeader;\n","import React from \"react\";\nimport \"./../../App.css\";\n\nfunction SymptomNav() {\n  return (\n    <div className=\"symptom-nav\">\n      <a href=\"#\" className=\"SymptomNav-link\">\n        Reported symptom\n      </a>\n      <a href=\"#\" className=\"SymptomNav-link\">\n        Negated\n      </a>\n      <a href=\"#\" className=\"SymptomNav-link\">\n        Unsure\n      </a>\n    </div>\n  );\n}\nexport default SymptomNav;\n","import React from \"react\";\nimport \"./../../App.css\";\nimport SymptomHeader from \"../basicParts/SymptomHeader\";\nimport SymptomNav from \"../basicParts/SymptomNav\";\nimport SymptomList from \"../symptomComponents/SymptomList\";\n\nfunction SymptomBox(props) {\n  return (\n    <div className=\"SymptomHeader\">\n      <SymptomHeader />\n      <SymptomNav />\n      {/* <SymptomList UserMessage={} /> */}\n    </div>\n  );\n}\nexport default SymptomBox;\n","import React from \"react\";\nimport \"./../../App.css\";\n\nfunction OutcomeHeader() {\n  return (\n    <div className=\"OutcomeHeader\">\n      <div className=\"outcome-img\">\n        <i class=\"fas fa-notes-medical outcome-icon\"></i>\n      </div>\n      <div className=\"outcome-content\">\n        <p className=\"outcome-heading\">Possible Causes</p>\n        <p>\n          <span>52%</span> Confidence\n        </p>\n      </div>\n    </div>\n  );\n}\nexport default OutcomeHeader;\n","import React from \"react\";\nimport \"./../../App.css\";\nimport OutcomeHeader from \"../basicParts/OutcomeHeader\";\n\nfunction OutcomeBox() {\n  return (\n    <div className=\"outcome-box\">\n      <OutcomeHeader />\n    </div>\n  );\n}\nexport default OutcomeBox;\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Chatbox from \"./components/cards/ChatBox\";\nimport SymptomBox from \"./components/cards/SymptomBox\";\nimport OutcomeBox from \"./components/cards/OutcomeBox\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Chatbox />\n      <SymptomBox />\n      <OutcomeBox />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}